// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyProject.Data.DataAccess;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MyProject.Data.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("MyProject.Core.Models.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnName("destination")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_updated")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int>("LinkType")
                        .HasColumnName("link_type")
                        .HasColumnType("integer");

                    b.Property<string>("SubDomain")
                        .IsRequired()
                        .HasColumnName("sub_domain")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.HasKey("Id")
                        .HasName("pk_links");

                    b.ToTable("links");
                });

            modelBuilder.Entity("MyProject.Core.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MidleNblame")
                        .IsRequired()
                        .HasColumnName("midle_nblame")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_persons");

                    b.ToTable("persons");
                });

            modelBuilder.Entity("MyProject.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_updated")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Passsword")
                        .IsRequired()
                        .HasColumnName("passsword")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int>("UserType")
                        .HasColumnName("user_type")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasName("ix_users_person_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("MyProject.Core.Models.User", b =>
                {
                    b.HasOne("MyProject.Core.Models.Person", "Person")
                        .WithOne()
                        .HasForeignKey("MyProject.Core.Models.User", "PersonId")
                        .HasConstraintName("fk_users_persons_person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
